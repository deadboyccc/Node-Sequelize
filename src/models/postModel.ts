import { DataTypes, Model, Optional } from "sequelize"
import { sequelize } from "../database"
import { User } from "./userModel"
import { Tag } from "./tagModel"

// Define the interface for Post attributes
interface PostAttributes {
  id: string
  text: string
  votes: number
  userId: string
  tagId: string
}

// Define the interface for creating Post instances
// (allows for optional 'id' and 'votes' during creation)
interface PostCreationAttributes
  extends Optional<PostAttributes, "id" | "votes"> {}

// Define the Post model extending Sequelize's Model class
class Post
  extends Model<PostAttributes, PostCreationAttributes>
  implements PostAttributes
{
  declare id: string
  declare text: string
  declare votes: number
  declare userId: string
  declare tagId: string

  // Association methods (generated by Sequelize)
  declare getUser: () => Promise<User>
}

// Initialize the Post model with its attributes and options
Post.init(
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    text: {
      type: DataTypes.STRING,
      allowNull: false
    },
    votes: {
      type: DataTypes.INTEGER,
      allowNull: true,
      defaultValue: 0
    },
    userId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: User,
        key: "id"
      }
    },
    tagId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: Tag,
        key: "id"
      }
    }
  },
  {
    sequelize,
    modelName: "post"
  }
)

export { Post, PostAttributes }
