import { DataTypes, Model, Optional } from "sequelize"
import { sequelize } from "../database"
import { User } from "./userModel"
import { Post } from "./postModel"

// Define the interface for Comment attributes
interface CommentAttributes {
  id: string
  text: string
  userId: string
  postId: string
}

// Define the interface for creating Comment instances
// (allows for optional 'id' during creation)
interface CommentCreationAttributes extends Optional<CommentAttributes, "id"> {}

// Define the Comment model extending Sequelize's Model class
class Comment
  extends Model<CommentAttributes, CommentCreationAttributes>
  implements CommentAttributes
{
  declare id: string
  declare text: string
  declare userId: string
  declare postId: string

  // Association methods (generated by Sequelize)
  declare getUser: () => Promise<User>
  declare getPost: () => Promise<Post>
}

// Initialize the Comment model with its attributes and options
Comment.init(
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    text: {
      type: DataTypes.STRING,
      allowNull: false
    },
    userId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: User,
        key: "id"
      }
    },
    postId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: Post,
        key: "id"
      }
    }
  },
  {
    sequelize,
    modelName: "comment"
  }
)

export { Comment, CommentAttributes }
